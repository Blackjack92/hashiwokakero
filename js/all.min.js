
class Chip {
    
    constructor(value, x, y, mark_function) {
        this.value = value;
        this.x = x;
        this.y = y;
        this.mark_function = mark_function;
		
		this.connections = [];
        this.marked = false;
		this.visualization = this.create_visualization();
    }
    
	mark() {
		this.marked = true;
		this.visualization.style.backgroundColor = "green";
	}
	
	unmark() {
		this.marked = false;
		this.visualization.style.backgroundColor = "transparent";
	}
	
	create_visualization() {
		var btn = document.createElement("button");
        btn.className = "mc";
        var ref = this;
        btn.onclick = function(){
            ref.mark_function(ref);
        };
        
        var t = document.createElement("span");
        t.className = 'mc-' + this.value;
        btn.appendChild(t);
        return btn;
	}
	
    draw() {
		return this.visualization;
    }
}

class Connection {
    
    constructor(x_start, y_start, x_end, y_end, connection_count) {
        this.x_start = x_start;
        this.y_start = y_start;
        this.x_end = x_end;
        this.y_end = y_end;
		this.connection_count = connection_count;
		this.visualization = this.create_visualization();
    }
	
	intersect_point(x, y) {
		return this.x_start <= x && this.x_end >= x && this.y_start <= y && this.y_end >= y;
	}
	
	intersect_other_connection(other) {
		return this.x_start <= other.x_end && this.x_end >= other.x_start && this.y_start <= other.y_end && this.y_end >= other.y_start;
	}
	
	create_visualization() {
		var span = document.createElement("span");
		var direction = this.x_start == this.x_end ? "ve" : "ho";
		span.className = "co-" + direction + "-" + this.connection_count;
		return span;
	}
    
	draw() {
		return this.visualization;
	}
}

class Game {
    
    constructor(x_size, y_size) {
        this.x_size = x_size;
        this.y_size = y_size;
        
        this.chips = [];
		this.connections = [];
    }

    init_by_json(json) {
    }
    
	get_marked_chips() {
		var marked_chips = []
		for (var i = 0; i < this.chips.length; i++) {
			var chip = this.chips[i];
			if (chip.marked) {
				marked_chips.push(chip);
			}
		}
		return marked_chips;
	}
	
    init() {
		var ref = this;
        var mark_function = function(chip) {
			var marked_chips = ref.get_marked_chips();
			
			// mark a single chip
			if (marked_chips.length <= 0 || (marked_chips.length == 1 && marked_chips.indexOf(chip) >= 0)) {
				if (chip.marked) {
					chip.unmark();
				} else {
					chip.mark();
				}				
			} else {
				// mark second chip and connect them if possible
				var first_chip = marked_chips[0];
				if (first_chip.x != chip.x && first_chip.y != chip.y) { return; }
				
				var connection = new Connection(first_chip.x, first_chip.y, chip.x, chip.y, 1);
				for (var i = 0; i < ref.connections.length; i++) {		
					// TODO: check if it does not intersect with other mc
					if (connection.intersect_other_connection(ref.connections[i])) {
						// do not mark because it is not possible
						return;
					}
				}
			
				// no line intersects with the new one
				first_chip.connections.push(connection);
				chip.connections.push(connection);
				ref.connections.push(connection);
				
				var x_min = Math.min(connection.x_start, connection.x_end);
				var x_max = Math.max(connection.x_start, connection.x_end);
				var y_min = Math.min(connection.y_start, connection.y_end);
				var y_max = Math.max(connection.y_start, connection.y_end);
				
				for (var i = x_min; i <= x_max; i++) {
					for (var j = y_min; j <= y_max; j++) {
						var cell = "r-" + j + "_c-" + i;
						$( "#" + cell).html(connection.create_visualization());
						console.log(cell);
					}
				}
			}
			

        };
        
        this.chips[0] = new Chip(2, 0, 0, mark_function);
        this.chips[1] = new Chip(2, 4, 0, mark_function);
        this.chips[2] = new Chip(3, 0, 2, mark_function);

        this.chips[3] = new Chip(5, 2, 2, mark_function);
        this.chips[4] = new Chip(4, 4, 2, mark_function);
        this.chips[5] = new Chip(2, 0, 4, mark_function);
        
        this.chips[6] = new Chip(4, 2, 4, mark_function);
    }

    get_chip(x, y) {
        for (var i = 0; i < this.chips.length; i++) {
            var chip = this.chips[i];
            if (chip.x === x && chip.y === y) {
                return chip;
            }
        }
        return undefined;
    }
    
	get_connection(x, y) {
		for (var i = 0; i < this.connections.length; i++) {
			var connection = this.connections[i];
			if (connection.intersect_point(x, y)) {
				return connection;
			}
		}
		return undefined;
	}
	
    draw() {
        var table = document.createElement("table");
        var table_body = document.createElement("tbody");
        for (var row = 0; row < this.y_size; row++) {
            var table_row = document.createElement("tr");
            for (var col = 0; col < this.x_size; col++) {
                var table_data = document.createElement('td');
				table_data.id = "r-" + row + "_c-" + col; 
				
                var chip = this.get_chip(col, row);
				var connection = this.get_connection(col, row);
                if (chip === undefined && connection === undefined) {
                    var span = document.createElement("span");
                    span.className = 'empty';
                    table_data.appendChild(span);
                } else if (chip !== undefined) {
                    table_data.appendChild(chip.draw());
					table_data.id = "mc_r-" + row + "_c-" + col;
                } else {
					table_data.appendChild(connection.draw());
				}
                    
                table_row.appendChild(table_data);
            }
            table_body.appendChild(table_row);
        }
        table.appendChild(table_body);
        return table;
    }

    is_finished() {
    }
    
}

var game = new Game(5, 5);

function init() {
    game.init();
}

function draw() {
    table = game.draw();
    $("div.game").empty();
    var test = $("div.game")[0];
    test.appendChild(table);
}
